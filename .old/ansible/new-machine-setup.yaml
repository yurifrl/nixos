- name: New Machine Setup
  hosts: master
  become: true
  vars:
    target_ip: "{{ hostvars[inventory_hostname]['ansible_host'] }}"
  tasks:
    - name: Create .ssh directory
      file:
        path: /home/nixos/.ssh
        state: directory
        owner: nixos
        group: users
        mode: '0700'

    - name: Check if SSH key exists
      stat:
        path: /home/nixos/.ssh/id_ed25519
      register: ssh_key

    - name: Get private key from 1Password and copy to target
      block:
        - name: Get private key from 1Password (local)
          local_action:
            module: shell
            cmd: op item get 'GithubAutomation' --fields 'private key' --reveal | tr -d '\"' | awk '/BEGIN/,/END/'
          register: private_key
          become: false
          when: not ssh_key.stat.exists

        - name: Copy private key to target
          copy:
            content: "{{ private_key.stdout }}"
            dest: /home/nixos/.ssh/id_ed25519
            owner: nixos
            group: users
            mode: '0600'
          when: not ssh_key.stat.exists

    - name: Update nix channels
      become_user: nixos
      command: nix-channel --add https://nixos.org/channels/nixpkgs-unstable nixpkgs-unstable && nix-channel --update

    - name: Check if repository exists
      stat:
        path: /home/nixos/home-systems
      register: repo_check

    - name: Clone repository
      become_user: nixos
      git:
        repo: git@github.com:yurifrl/home-systems.git
        dest: /home/nixos/home-systems
        accept_hostkey: yes
        update: yes
      when: not repo_check.stat.exists

    - name: Copy gitconfig
      copy:
        src: ~/.gitconfig
        dest: /home/nixos/.gitconfig
        owner: nixos
        group: users
        mode: '0644'

    - name: Create data directory
      file:
        path: /data
        state: directory
        owner: nixos
        group: users
        mode: '0755'

    - name: Create Tailscale auth key file
      copy:
        content: "{{ lookup('env', 'NIXOS1_TAILSCALE_AUTH_KEY') }}"
        dest: /data/tailscale-auth.key
        owner: nixos
        group: users
        mode: '0600'
      no_log: true

    - name: Create k3s token file
      copy:
        content: "{{ lookup('env', 'NIXOS1_K3S_TOKEN') }}"
        dest: /data/k3s-token
        owner: nixos
        group: users
        mode: '0600'
      no_log: true

    - name: Copy secrets
      copy:
        src: ../hack/secrets.sh
        dest: /data/secrets.sh
        owner: nixos
        group: users
        mode: '0755'

    - name: Check if k3s.yaml exists locally
      local_action:
        module: stat
        path: ~/.kube/k3s.yaml
      register: k3s_yaml_local
      become: false

    - name: Create local .kube directory
      local_action:
        module: file
        path: ~/.kube
        state: directory
        mode: '0755'
      become: false
      when: not k3s_yaml_local.stat.exists

    - name: Get k3s.yaml from remote
      fetch:
        src: /etc/rancher/k3s/k3s.yaml
        dest: ~/.kube/k3s.yaml
        flat: yes

    - name: Update k3s.yaml server address (local)
      local_action:
        module: replace
        path: ~/.kube/k3s.yaml
        regexp: 'server: https://0.0.0.0:6443'
        replace: "server: https://{{ target_ip }}:6443"
      become: false

    - name: Set k3s.yaml permissions (local)
      local_action:
        module: file
        path: ~/.kube/k3s.yaml
        mode: '0644'
      become: false

    - name: Wait for node to be ready
      local_action:
        module: command
        cmd: kubectl wait --for=condition=ready node nixos-1 --timeout=300s
      become: false
      register: node_wait
      changed_when: false
      
    - name: Verify setup
      local_action:
        module: command
        cmd: kubectl get nodes
      become: false
      register: node_status
      changed_when: false

    - name: Display final instructions
      debug:
        msg: |
          Setup complete! Your new machine is ready.

          Next steps:
          1. Check ArgoCD setup: sudo systemctl status argo-setup
          2. Check secret loader: sudo systemctl status secret-loader
          3. Access the system: ssh nixos@{{ target_ip }}

          Useful commands:
          # Status
          sudo systemctl status tailscale-autoconnect
          sudo systemctl status argo-setup
          sudo systemctl status secret-loader

          # Monitor logs
          sudo journalctl -u tailscale-autoconnect -f
          sudo journalctl -u argo-setup -f
          sudo journalctl -u secret-loader -f

          # System configuration
          sudo nixos-rebuild switch --flake /home/nixos/home-systems/nixos#rpi --impure --show-trace

version: "3"

vars:
  BUILD: .#nixosConfigurations.digitalOcean.config.system.build.digitalOceanImage
  CACHE: /nix-cache
  NIX_SECRET_KEY_FILE: "~/.ssh/cache-priv-key.pem"
tasks:
  deploy:
    desc: Deploy the NixOS image
    cmds:
      - deploy

  build:
    desc: Build the NixOS image
    cmds:
      - nix build .#nixosConfigurations.digitalOcean.config.system.build.digitalOceanImage --system x86_64-linux

  cache:
    desc: Cache build products and dependencies
    cmds:
      - |
        DERIVATION=$(nix path-info --derivation {{.BUILD}})
        mapfile -t DEPENDENCIES < <(nix-store --query --requisites --include-outputs "${DERIVATION}")
        mapfile -t DERIVATIONS < <(echo "${BUILDS[@]}" | xargs nix path-info --derivation)
        

        # Sign the dependencies
        printf '%s\n' "${DEPENDENCIES[@]}" | xargs nix store sign --key-file "~/.ssh/cache-priv-key.pem" --recursive
        
        # Copy to cache
        printf '%s\n' "${DEPENDENCIES[@]}" | xargs nix copy --to "/nix-cache"

# $ echo "${BUILDS[@]}" | xargs nix build

# $ mapfile -t DERIVATIONS < <(echo "${BUILDS[@]}" | xargs nix path-info --derivation)

# $ mapfile -t DEPENDENCIES < <(echo "${DERIVATIONS[@]}" | xargs nix-store --query --requisites --include-outputs)

# $ echo "${DEPENDENCIES[@]}" | xargs nix store sign --key-file "${KEY_FILE}" --recursive

# $ echo "${DEPENDENCIES[@]}" | xargs nix copy --to "${CACHE}"


  upload:
    cmds:
      - doctl compute image create nix-image --region nyc1 --image-url "https://github.com/yurifrl/nixos/actions/runs/13526601851/artifacts/2650149472" --image-description "Custom nix image"

  tag:
    desc: Create and push a new version tag
    cmds:
      - |
        VERSION=$(cat VERSION)
        IFS='.' read -ra VER <<< "$VERSION"
        
        case "{{.CLI_ARGS}}" in
          "major")
            NEW_VERSION="$((${VER[0]} + 1)).0.0"
            ;;
          "minor")  
            NEW_VERSION="${VER[0]}.$((${VER[1]} + 1)).0"
            ;;
          "patch"|"")
            NEW_VERSION="${VER[0]}.${VER[1]}.$((${VER[2]} + 1))"
            ;;
          *)
            echo "Invalid argument. Use 'major', 'minor', or 'patch'"
            exit 1
            ;;
        esac
        
        echo "$NEW_VERSION" > VERSION
        git add VERSION
        git commit -m "chore: bump version to $NEW_VERSION"
        git tag "v$NEW_VERSION"
        git push origin "v$NEW_VERSION"
        git push origin main


  generate-deploy-keys:
    desc: Generate new SSH keys for deployment
    dir: ./secrets/deploy-key
    cmds:
      - ssh-keygen -t ed25519 -C "github-actions-deploy" -f ./deploy-key -N ""
      - |
        # Generate known hosts file
        echo "Scanning hosts:"
        ssh-keyscan -t ed25519 nixos.tailcecc0.ts.net 45.55.248.197 > ./known_hosts
        echo "‚ú® Keys generated successfully!"
        echo ""
        echo "üîë Private Key (add to GitHub secret DEPLOY_SSH_KEY):"
        echo "----------------------------------------"
        cat ./deploy-key
        echo "----------------------------------------"
        echo ""
        echo "üîê Public Key (add to NixOS config users/root.nix):"
        echo "----------------------------------------"
        cat ./deploy-key.pub
        echo "----------------------------------------"
        echo ""
        echo "üåê Known Hosts (add to GitHub secret DEPLOY_KNOWN_HOSTS):"
        echo "----------------------------------------"
        cat ./known_hosts
        echo "----------------------------------------"
        echo ""
        echo "All files saved in the ./secrets directory"

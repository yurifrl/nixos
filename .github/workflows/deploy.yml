name: "ðŸš¢ Deploy NixOS Configuration"

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - uses: actions/checkout@v4

      - name: Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: "${{ secrets.TS_OAUTH_CLIENT_ID }}"
          oauth-secret: "${{ secrets.TS_OAUTH_SECRET }}"
          tags: tag:ci
      
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
      
      - name: Enable Nix Flakes
        run: |
          mkdir -p ~/.config/nix
          echo "experimental-features = nix-command flakes" >> ~/.config/nix/nix.conf

      - name: Create deploy.json
        run: |
          printf '%s\n' '${{ secrets.DEPLOY_NIX_JSON }}' > deploy.json

      - name: Generate and setup SSH keys
        run: |
          # Generate known hosts from deploy.json
          echo "Generating known hosts..."
          KNOWN_HOSTS=""
          for hostname in $(jq -r 'to_entries[] | .value' deploy.json); do
            echo "Scanning $hostname..."
            host_key=$(ssh-keyscan -t ed25519 "$hostname" 2>/dev/null || true)
            if [ -n "$host_key" ]; then
              KNOWN_HOSTS="$KNOWN_HOSTS$host_key"$'\n'
            fi
          done
          
          # Setup SSH key and known hosts
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          echo "$KNOWN_HOSTS" > ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
                
      - name: Test connection to servers
        run: |
          # Extract hostnames from deploy.json and test each one (skip Tailscale hostname)
          for hostname in $(jq -r 'to_entries[] | select(.key != "digitalOceanHostname") | .value' deploy.json); do
            echo "Testing connection to $hostname..."
            ssh -o StrictHostKeyChecking=no root@$hostname 'cowsay-version test'
          done

      - name: Cache Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/flake.lock') }}
          paths: |
            /nix/store
            /nix-cache

      - name: Install deploy-rs
        run: nix profile install nixpkgs#deploy-rs

      - name: Run deployment
        run: deploy path:.#